# Solution for LeetCode Problem 155: Min Stack
# Time Complexity:
#   - `push`: O(1), as appending to the stack and updating the min stack are constant-time operations.
#   - `pop`: O(1), as removing the top element from the stack and min stack are constant-time operations.
#   - `top`: O(1), as retrieving the top element is a constant-time operation.
#   - `getMin`: O(1), as retrieving the minimum value is a constant-time operation.
# Space Complexity: O(n), where n is the number of elements in the stack.
#   - In the worst case, all elements are pushed onto both the main stack and the min stack.

class MinStack:
    def __init__(self):
        self.stack = []  # Main stack to store all values
        self.minStack = []  # Stack to store the current minimum values

    def push(self, val: int) -> None:
        self.stack.append(val)  # Add the value to the main stack

        # Update the minStack if it's empty or the new value is less than or equal to the current minimum
        if self.getMin() is None or val <= self.getMin():
            self.minStack.append(val)

    def pop(self) -> None:
        if self.stack:
            val = self.stack.pop()  # Remove the top value from the main stack
            # If the removed value is the current minimum, remove it from the minStack as well
            if val == self.getMin():
                self.minStack.pop()

    def top(self) -> int:
        return self.stack[-1] if self.stack else None

    def getMin(self) -> int:
        return self.minStack[-1] if self.minStack else None
