# Solution for LeetCode Problem 42: Trapping Rain Water
# Time Complexity: O(n), where n is the length of the input list `height`
#   - Each index is visited at most once by the left and right pointers.
# Space Complexity: O(1), as the solution uses a constant amount of extra space.
class Solution:
    def trap(self, height: List[int]) -> int:
        # Initialize two pointers for the left and right ends of the elevation map
        left, right = 0, len(height) - 1

        # Initialize maximum heights encountered from the left and right
        maxLeft = height[0]
        maxRight = height[right]

        # Initialize the total trapped water area
        area = 0

        # Iterate while the left pointer is less than the right pointer
        while left < right:
            # If maxLeft is less than maxRight, process the left side
            if maxLeft < maxRight:
                left += 1
                # Update the maxLeft to the highest bar encountered so far from the left
                maxLeft = max(maxLeft, height[left])
                # Calculate trapped water at the current left position and add to the total area
                area += maxLeft - height[left]
            else:
                # Otherwise, process the right side
                right -= 1
                # Update the maxRight to the highest bar encountered so far from the right
                maxRight = max(maxRight, height[right])
                # Calculate trapped water at the current right position and add to the total area
                area += maxRight - height[right]

        # Return the total trapped water
        return area
